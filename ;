#!/usr/bin/env ruby

# scholar-rename, interactive pdf-namer
# prereq: pdftotext installation for text dump
# renames a pdf file to author-title-year.pdf
# or other formats based on your selection
# by jeremy warner, fall 2016


file = ARGV.first
temp = "temp-scholar-rename-text"
system("pdftotext -q #{file} #{temp}")
content = File.read temp


class Selector
  attr_reader :title

  # take the first 10 lines of the pdftotext output and assign it to the
  # context class instance variable, use later when choosing selector
  def initialize(c)
    @content = c.split("\n")[0..20].reject {|x| x.length < 3 }
    @fulltxt = c.split("\n")
  end

  def select
    puts "Select title line number:"
    title = choose @content

    puts "Select author line number:"
    authors = choose @content

    puts "Select author form number:"
    author = gen_authors(authors)

    year = gen_year # just read it

    puts "Select desired title format:"
    @title = choose(gen_forms year, title, author)
  end

  private
  # Pass in an array to list and be selected, and return the element that the
  # user selects back to the calling method. pretty sketchy way to interpret
  # the users input as a range or integer, but seems to be working for now...
  # requires you to check for an array and join it
  def choose(opts)
    opts.each_with_index {|l, i| puts "#{i}\t#{l}" }
    printf "Your selection [0 - #{opts.length-1}]: "
    line = STDIN.gets.chomp
    meta = "opts[#{line}]"
    mout = eval meta
    if mout.is_a? (Array)
      mout.join ''
    else
      mout
    end
  end

  # Generate different forms for author selection, enumerating the different
  # author that you want to save the file as. Split based on a comma.
  def gen_authors(aline)
    lines = aline.split(", ").map {|a| a.sub /\d$/, '' } # delete ref number.
    if lines.is_a?(String)
      aline # return first
    else # its an array, augment w/ lname and choose
      alines = lines + lines.map {|a| a.split.last }
      choose alines
    end
  end

  # based on the collected information, generate different forms of the title.
  # perhaps at some point this could be autoselected from the command line,
  # like how the date formatting works, using symbols for different features...
  def gen_forms(y, t, a)
    frame = [
      a.upcase + " " + y + " " + t + ".pdf",
      a        + " " + t + " " + y + ".pdf",
      a        + " " + y + " " + t + ".pdf",
      y        + " " + a + " " + t + ".pdf",
    ]
  end

  # parse out a year from a string, for each line of the document until found.
  # then clean it up and return it
  def gen_year
    @fulltxt.each do |l| # find year
      lm = l.match(/(19|20)\d\d/)
      return lm[0] if !lm.nil?
    end

    # not matched, return current year
    Time.now.year.to_s
  end
end


# Choose pdf qualities
s = Selector.new(content)
s.select # choose props
printf "#{s.title} - ok? [yN]: "
conf = STDIN.gets.chomp # confirm title
begin # file read in from first ARGV above
  File.rename(file, s.title) if conf.match /^(y|Y).*/
ensure # cleaning up file cleanup from pdftotext
  puts "Cleaning up..."
  File.delete(temp)
end

